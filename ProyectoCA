#include <iostream>

using namespace std;

 // NUM_CUENTAS = 3, número de cuentas predefinidas

// Clase que representa una cuenta bancaria
class Cuenta {
private:
    int numeroCuenta;
    int nip;
    double saldo;
    double saldoPendiente;

public:
    // Constructor 
    Cuenta(int cuentaIngresada, int nipIngresado, double saldoInicial) {
        numeroCuenta = cuentaIngresada;
        nip = nipIngresado;
        saldo = saldoInicial;
        saldoPendiente = 0.0;
    }

    int obtenerNumeroCuenta() const { return numeroCuenta; }

    bool esNIPValido(int nipUsuario) const {
        return nip == nipUsuario;
    }

    double obtenerSaldo() const { return saldo; }
    double obtenerSaldoPendiente() const { return saldoPendiente; }
    
    double obtenerSaldoTotal() const { return saldo + saldoPendiente; }
    
    bool retirar(double monto) {
    if (monto > saldo) return false;
    saldo -= monto;
    return true;
    }
    
    
     void depositarPendiente(double monto) {
        saldoPendiente += monto;
    }
    
    void verificarDeposito() {
        saldo += saldoPendiente;
        saldoPendiente = 0.0;
    }

};

// Clase que representa la base de datos del banco
class BaseDatosBanco {
private:
    Cuenta** listaCuentas; // puntero a arreglo de punteros a cuentas

public:
    BaseDatosBanco() {
        // Crear arreglo dinámico de punteros a cuentas
        listaCuentas = new Cuenta*[3];
        listaCuentas[0] = new Cuenta(12345, 11111, 1000.0);
        listaCuentas[1] = new Cuenta(23456, 22222, 500.0);
        listaCuentas[2] = new Cuenta(34567, 33333, 750.0);
    }

    Cuenta* autenticarUsuario(int cuenta, int nip) {
        for (int i = 0; i < 3; i++) {
            if (listaCuentas[i]->obtenerNumeroCuenta() == cuenta &&
                listaCuentas[i]->esNIPValido(nip)) {
                return listaCuentas[i];
            }
        }
        return nullptr;
    }

    ~BaseDatosBanco() {
        for (int i = 0; i < 3; i++) {
            delete listaCuentas[i];
        }
        delete[] listaCuentas;
    }
};

class DispensadorEfectivo {
private:
	
	const int numDenominaciones = 12;
    double denominaciones[12] = {200, 100, 50, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.01};
    int cantidadBilletes[12] = {10, 10, 10, 10, 10, 20, 30, 50, 100, 200, 500, 1000};

public:
    // Verificar si se puede entregar el monto, llenar arreglo billetesAEntregar
    bool puedeDispensar(int monto, int billetesAEntregar[12]) {
        int montoRestante = monto;

        // Inicializar billetesAEntregar
        for (int i = 0; i < numDenominaciones ; i++) {
            billetesAEntregar[i] = 0;
        }

        for (int i = 0; i < numDenominaciones ; i++) {
            int billetesNecesarios = montoRestante / denominaciones[i];
            int billetesAUsar = (billetesNecesarios < cantidadBilletes[i]) ? billetesNecesarios : cantidadBilletes[i];

            billetesAEntregar[i] = billetesAUsar;
            montoRestante -= billetesAUsar * denominaciones[i];
        }

        return montoRestante == 0;
    }

    // Descontar los billetes usados
    void dispensar(int billetesAEntregar[12]) {
        for (int i = 0; i < numDenominaciones ; i++) {
            cantidadBilletes[i] -= billetesAEntregar[i];
        }
    }

    // Obtener monto total disponible
    int obtenerMontoDisponible() const {
        int total = 0;
        for (int i = 0; i < numDenominaciones ; i++) {
            total += denominaciones[i] * cantidadBilletes[i];
        }
        return total;
    }

    // Mostrar estado del dispensador
    void mostrarEstado() const {
        cout << "\nEstado actual del dispensador:" << endl;
        for (int i = 11; i > 7 ; i--) {
            cout << "Bs" << denominaciones[i] << ": " << cantidadBilletes[i] << " Centavos" << endl;
        }
        for (int i = 7; i > 4 ; i--) {
            cout << "Bs" << denominaciones[i] << ": " << cantidadBilletes[i] << " Monedas" << endl;
        }
          for (int i = 4; i >= 0 ; i--) {
            cout << "Bs" << denominaciones[i] << ": " << cantidadBilletes[i] << " Billetes" << endl;
        }
    }

    
    
    int getDenominacion(int i) const {
    return denominaciones[i];
    }

    
};


// Funcion principal
int main() {
   BaseDatosBanco baseDatos;
   DispensadorEfectivo dispensador;
   
    while (true) {

    int cuentaIngresada;
    int nipIngresado;
    Cuenta* cuenta = nullptr;

    while (cuenta == nullptr) {
        system("cls"); // Limpia pantalla antes de mostrar el menu de nuevo

        cout << "Bienvenido!" << endl << endl;
        cout << "Ingrese su numero de cuenta: ";
        cin >> cuentaIngresada;
        
        if (cin.fail()) {
           cin.clear();
           cin.ignore(10000, '\n');
           cout << "\nEntrada invalida. Por favor ingrese un numeros, no letras." << endl;
           cout << "Presione ENTER para continuar...";
           cin.get();
           continue; // vuelve a mostrar el menu de inicio
           }
        
         if (cuentaIngresada == -1) {
                cout << "\nCerrando el cajero automatico..." << endl;
                return 0; // Finalizar el programa
            }
            
            
        cout<<endl;

        cout << "Ingrese su NIP: ";
        cin >> nipIngresado;
        
       

        cuenta = baseDatos.autenticarUsuario(cuentaIngresada, nipIngresado);

        if (cuenta == nullptr) {
            cout << "Numero de cuenta o NIP incorrecto." << endl;
            cout << "Presione ENTER para intentar de nuevo...";
            cin.ignore(); // limpiara buffer
            cin.get();    // esperar a que se presione ENTER
        }
        
        cout<<endl;
        
         if (cin.fail()) {
           cin.clear();
           cin.ignore(10000, '\n');
           cout << "\nEntrada invalida. Por favor ingrese un numeros, no letras." << endl;
           cout << "Presione ENTER para continuar...";
           cin.get();
           continue; // vuelve a mostrar el menu de inicio
           }
    }
    
    
    int opcion;
        do {
            system("cls");
            cout << "Menu Principal:" << endl;
            cout << "     1 - Ver mi saldo" << endl;
            cout << "     2 - Retirar efectivo" << endl;
            cout << "     3 - Depositar fondos" << endl;
            cout << "     4 - Salir" << endl;
            cout << "Escriba una opcion: ";
            cin >> opcion;
            
            
            //Volver a correr el codigo en caso de ingresar una letra en cin<<option
            if (cin.fail()) {
           cin.clear();
           cin.ignore(10000, '\n');
           cout << "\nEntrada invalida. Por favor ingrese un numero del 1 al 4." << endl;
           cout << "Presione ENTER para continuar...";
           cin.get();
           continue; // vuelve a mostrar el menu principal
}

            switch (opcion) {
                case 1:
                	system("cls");
                    cout << "\nSu saldo disponible es: Bs" << cuenta->obtenerSaldo() << endl << endl;
                    cout << "Saldo pendiente por verificar: Bs" << cuenta->obtenerSaldoPendiente() << endl<<endl;
                    cout << "Saldo total: Bs" << cuenta->obtenerSaldoTotal() << endl << endl;

                    cout << "Presione ENTER para continuar...";
                    cin.ignore();
                    cin.get();
                    break;
                case 2: {
                    int opcionRetiro;
                    double montoRetiro;
                    int billetesAEntregar[12];

                    while (true) {
                          system("cls");
                          cout << "Opciones de retiro:" << endl;
                          cout << "     1 - Bs0.01    6 - Bs2" << endl;
                          cout << "     2 - Bs0.1     7 - Bs5" << endl;
                          cout << "     3 - Bs0.2     8 - Bs10" << endl;
                          cout << "     4 - Bs0.5     9 - Bs20" << endl;
                          cout << "     5 - Bs1       10 - Bs50" << endl;
                          cout << "     4 - Bs0.5     11 - Bs100" << endl;
                          cout << "     5 - Bs1       12 - Bs200" << endl;
                          cout << "                   13  - Cancelar Transaccion" << endl;
                          cout << "Elija una opcion de retiro (1 a 13): ";
                          cin >> opcionRetiro;
        
                   if (cin.fail()) {
                      cin.clear(); // limpia el estado de error
                      cin.ignore(10000, '\n'); // limpia todo el buffer de entrada
                      cout << "\nEntrada invalida. Por favor ingrese un numero entre 1 y 6." << endl;
                      cout << "Presione ENTER para continuar...";
                      cin.get(); // espera que se presione ENTER correctamente
                      continue; // vuelve al menu de retiro
                      }


                      // Validar opcion
                    if (opcionRetiro < 1 || opcionRetiro > 13) {
                        cout << "\nOpcion invalida. Intente de nuevo." << endl;
                        cout << "Presione ENTER para continuar...";
                        cin.ignore();
                        cin.get();
                        continue; // vuelve al menu de retiro
                        }

                     if (opcionRetiro == 13) {
                         system("cls");
                         cout << "Transaccion cancelada." << endl;
                         cout << "Presione ENTER para continuar...";
                         cin.ignore();
                         cin.get();
                         break; // sale del menu de retiro al menu principal
                        }

                        // Determinar el monto según la opcion
                        switch (opcionRetiro) {
                        case 1: montoRetiro = 0.01; break;
                        case 2: montoRetiro = 0.1; break;
                        case 3: montoRetiro = 0.2; break;
                        case 4: montoRetiro = 0.5; break;
                        case 5: montoRetiro = 1; break;
                        case 6: montoRetiro = 2; break;
                        case 7: montoRetiro = 5; break;
                        case 8: montoRetiro = 10; break;
                        case 9: montoRetiro = 20; break;
                        case 10: montoRetiro = 50; break;
                        case 11: montoRetiro = 100; break;
                        case 12: montoRetiro = 200; break;
                        }

                        // Verificar saldo
                        if (montoRetiro > cuenta->obtenerSaldo()) {
                        system("cls");
                        cout << "Saldo insuficiente. Su saldo actual es: Bs" << cuenta->obtenerSaldo() << endl;
                        cout << "Presione ENTER para seleccionar un monto menor...";
                        cin.ignore();
                        cin.get();
                        continue;
                        }

                       // Verificar billetes disponibles
                      if (!dispensador.puedeDispensar(montoRetiro, billetesAEntregar)) {
                      system("cls");
                      cout << "El cajero no puede dispensar el monto solicitado con los billetes disponibles." << endl;
                      dispensador.mostrarEstado();
                      cout << "Presione ENTER para seleccionar un monto diferente...";
                      cin.ignore();
                      cin.get();
                      continue;
                      }

                      // Realizar el retiro
                      cuenta->retirar(montoRetiro);
                      dispensador.dispensar(billetesAEntregar);

                      system("cls");
                      cout << "\nPor favor tome su dinero: " << endl;
                      for (int i = 0; i < 12; i++) {
                      if (billetesAEntregar[i] > 5) {
                      cout << "Bs" << dispensador.getDenominacion(i) << " x " << billetesAEntregar[i] << " billetes" << endl;
                       }
                       if (billetesAEntregar[i] < 10 && billetesAEntregar[i] >= 1) {
                      cout << "Bs" << dispensador.getDenominacion(i) << " x " << billetesAEntregar[i] << " Monedas" << endl;
                       }
                       
                      }

                      cout << "Su nuevo saldo es: Bs" << cuenta->obtenerSaldo() << endl << endl;
                      dispensador.mostrarEstado();

                      cout << endl;
                      cout << "Presione ENTER para continuar...";
                      cin.ignore();
                      cin.get();

                      break; // salir del ciclo despues de retiro exitoso
                     }

                     break;
                }

                    
                case 3: {
                	//system("cls");
                   int montoCentavos;
                   
                   while(true){
				   
				   
                   system("cls");
                   cout << "\nIngrese el monto que desea depositar (en centavos, ej: 125 = Bs1.25), o 0 para cancelar: ";
                   cin >> montoCentavos;
                   
                   if (montoCentavos < 0) {
                   system("cls");
                   cout<<endl;
                   cout << "No se puede ingresar una cantidad negativa de dinero.\n"<<endl<<endl;
                   cout << "Presione ENTER para continuar...";
                   cin.ignore();
                   cin.get(); // espera que se presione ENTER correctamente
                   continue; // vuelve al menu de deposito
                   }
                   
                   

                if (montoCentavos == 0) {
                   system("cls");
                   cout<<endl;
                   cout << "Transaccion cancelada." << endl<<endl;
                   cout << "Presione ENTER para continuar...";
                   cin.ignore();
                   cin.get();
                   break;
                }

                // Convertir a Bs
                double montoBs = montoCentavos / 100.0;
                
                cuenta->depositarPendiente(montoBs);

                system("cls");
                cout << "\nDeposito exitoso. Se han depositado Bs" << montoBs << " (pendiente por verificar)." <<endl<<endl;
                cout << "Este dinero no esta disponible de inmediato para retirarse."<<endl; 
                cout<<"El banco debe verificar fisicamente el monto del efectivo depositado" <<endl<<endl;
                cin.ignore();
                cout << "Presione ENTER para continuar...";
                cin.get();

                break;
            }
            break;
        }
                    
                case 4:
                	system("cls");
                    cout << "\nGracias por usar el cajero. Hasta pronto!" <<endl<<endl;
                    cout << "Presione ENTER para cerrar su sesion...";
                    cin.ignore();
                    cin.get();
                    break;
                default:
                    cout << "\nOpcion invalida. Intente de nuevo." <<endl<<endl;
                    cout << "Presione ENTER para continuar...";
                    cin.ignore();
                    cin.get();
                    break;
            }
        } while (opcion != 4);


   }
  
  
   return 0; 
    
}